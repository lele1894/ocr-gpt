name: Build and Release OCR-GPT

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      release_notes:
        description: 'Release notes'
        required: false
        default: |
          🚀 OCR-GPT Release
          
          ## 新功能
          - 截图OCR识别 (Alt+1)
          - GPT智能问答
          - 便携式配置管理
          
          ## 使用方法
          1. 下载 OCR-GPT.exe
          2. 运行程序
          3. 点击"设置"配置API密钥
          4. 按 Alt+1 开始使用

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: 验证图标文件
      run: |
        if (Test-Path "ai.png") {
          Write-Output "✓ ai.png 存在"
          $size = (Get-Item "ai.png").Length / 1MB
          Write-Output "  文件大小: $([math]::Round($size, 2)) MB"
        } else {
          Write-Error "✗ ai.png 不存在"
          exit 1
        }
        
        if (Test-Path "ai.ico") {
          Write-Output "✓ ai.ico 存在"
          $size = (Get-Item "ai.ico").Length / 1KB
          Write-Output "  文件大小: $([math]::Round($size, 2)) KB"
        } else {
          Write-Error "✗ ai.ico 不存在"
          exit 1
        }
      shell: pwsh
      
    - name: 验证核心文件
      run: |
        $requiredFiles = @("text_search.py", "config_manager.py", "build.py", "version_info.txt")
        foreach ($file in $requiredFiles) {
          if (Test-Path $file) {
            Write-Output "✓ $file 存在"
          } else {
            Write-Error "✗ $file 不存在"
            exit 1
          }
        }
      shell: pwsh
      
    - name: 构建应用程序
      run: |
        Write-Output "开始构建 OCR-GPT..."
        python build.py
        
        # 验证构建结果
        if (Test-Path "dist\OCR-GPT.exe") {
          $size = (Get-Item "dist\OCR-GPT.exe").Length / 1MB
          Write-Output "✓ 构建成功! OCR-GPT.exe ($([math]::Round($size, 2)) MB)"
        } else {
          Write-Error "✗ 构建失败，未找到 OCR-GPT.exe"
          exit 1
        }
      shell: pwsh
      
    - name: 创建发布包
      run: |
        # 创建发布目录
        New-Item -ItemType Directory -Force -Path "release"
        
        # 复制主程序
        Copy-Item "dist\OCR-GPT.exe" "release\"
        
        # 创建使用说明文件
        Write-Output "创建使用说明文件..."
        
        # 使用简单的 PowerShell 字符串构建
        $title = "# OCR-GPT v${{ github.event.inputs.version }}"
        $quickStart = @(
          "",
          "## 🚀 快速开始",
          "",
          "1. **下载并运行**",
          "   - 双击 OCR-GPT.exe 启动程序",
          "   - 首次运行会在程序目录创建 config.json 配置文件",
          "",
          "2. **配置API密钥**",
          "   - 点击设置按钮",
          "   - 配置百度OCR API（可选）",
          "   - 配置GPT API（必需）",
          "",
          "3. **开始使用**",
          "   - 按 Alt+1 截图识别文本",
          "   - 在文本框中编辑或输入问题",
          "   - 按回车或点击提问获取AI回答"
        )
        
        $apiConfig = @(
          "",
          "## 🔧 API配置",
          "",
          "### 百度OCR（可选）",
          "- 访问：https://ai.baidu.com",
          "- 获取 API Key 和 Secret Key",
          "",
          "### GPT API（必需）",
          "- 推荐：https://free.v36.cm",
          "- 获取 API Key"
        )
        
        $tips = @(
          "",
          "## 💡 使用技巧",
          "",
          "- 快捷键: Alt+1 快速截图识别",
          "- 置顶窗口: 勾选置顶保持窗口在最前",
          "- 回车提问: 在文本框中按回车快速提问",
          "- 便携使用: 程序和配置文件可以一起移动"
        )
        
        $notes = @(
          "",
          "## ⚠️ 注意事项",
          "",
          "- 需要网络连接使用API服务",
          "- 首次运行可能被杀毒软件误报，请添加信任",
          "- 配置文件保存在程序同目录，便于备份",
          "",
          "## 🐛 问题反馈",
          "",
          "如遇问题，请访问：https://github.com/${{ github.repository }}/issues",
          "",
          "---",
          "构建时间: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')",
          "构建版本: ${{ github.event.inputs.version }}"
        )
        
        # 合并所有内容
        $allContent = $title + $quickStart + $apiConfig + $tips + $notes
        $allContent | Out-File -FilePath "release\使用说明.txt" -Encoding UTF8
        
        # 创建版本信息文件
        $versionInfo = @{
          version = "${{ github.event.inputs.version }}"
          build_date = "$(Get-Date -Format 'yyyy-MM-dd')"
          build_time = "$(Get-Date -Format 'HH:mm:ss')"
          commit_sha = "${{ github.sha }}"
          repository = "${{ github.repository }}"
        }
        
        $versionInfo | ConvertTo-Json -Depth 2 | Out-File -FilePath "release\version.json" -Encoding UTF8
        
        Write-Output "✓ 发布包创建完成"
        Get-ChildItem "release" | ForEach-Object { 
          $size = if ($_.Length -gt 1MB) { "$([math]::Round($_.Length / 1MB, 2)) MB" } else { "$([math]::Round($_.Length / 1KB, 2)) KB" }
          Write-Output "  $($_.Name) ($size)"
        }
      shell: pwsh
      
    - name: 创建ZIP发布包
      run: |
        # 创建ZIP包
        Compress-Archive -Path "release\*" -DestinationPath "OCR-GPT-${{ github.event.inputs.version }}-windows.zip" -Force
        
        $zipSize = (Get-Item "OCR-GPT-${{ github.event.inputs.version }}-windows.zip").Length / 1MB
        Write-Output "✓ ZIP包创建完成: OCR-GPT-${{ github.event.inputs.version }}-windows.zip ($([math]::Round($zipSize, 2)) MB)"
      shell: pwsh
      
    - name: 上传构建产物
      uses: actions/upload-artifact@v3
      with:
        name: OCR-GPT-${{ github.event.inputs.version }}
        path: |
          release/
          OCR-GPT-${{ github.event.inputs.version }}-windows.zip
        retention-days: 30
        
    - name: 创建GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version }}
        name: "OCR-GPT ${{ github.event.inputs.version }}"
        body: ${{ github.event.inputs.release_notes }}
        draft: false
        prerelease: false
        files: |
          release/OCR-GPT.exe
          release/使用说明.txt
          release/version.json
          OCR-GPT-${{ github.event.inputs.version }}-windows.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 构建完成通知
      run: |
        Write-Output ""
        Write-Output "🎉 OCR-GPT ${{ github.event.inputs.version }} 构建发布完成!"
        Write-Output ""
        Write-Output "📦 发布内容:"
        Write-Output "  - OCR-GPT.exe (主程序)"
        Write-Output "  - 使用说明.txt (用户指南)"
        Write-Output "  - version.json (版本信息)"
        Write-Output "  - OCR-GPT-${{ github.event.inputs.version }}-windows.zip (完整包)"
        Write-Output ""
        Write-Output "🔗 发布地址: https://github.com/${{ github.repository }}/releases/tag/${{ github.event.inputs.version }}"
        Write-Output ""
      shell: pwsh