name: Build EXE

on:
  workflow_dispatch:
    inputs:
      tag_version:
        description: '版本号 (例如: v1.0.0)'
        required: true
        type: string
        default: 'v1.0.0'

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # 使用更轻量的 GUI 库
        pip install customtkinter==5.2.2
        pip install requests==2.31.0
        pip install pyautogui==0.9.54
        pip install keyboard==0.13.5
        pip install Pillow==10.0.0
        pip install pyinstaller==6.4.0
    
    - name: Create runtime hook
      shell: powershell
      run: |
        $hookContent = @'
        import os
        import sys
        import atexit
        import ctypes
        from ctypes import wintypes

        def cleanup():
            """清理函数"""
            os._exit(0)

        # 注册清理函数
        atexit.register(cleanup)

        # Windows API 常量
        CSIDL_COMMON_APPDATA = 35
        SHGFP_TYPE_CURRENT = 0
        MAX_PATH = 260

        # 获取程序数据目录
        def get_program_files():
            if getattr(sys, "frozen", False):
                # 如果是打包后的 exe
                try:
                    # 直接使用 exe 所在目录
                    exe_dir = os.path.dirname(sys.executable)
                    config_dir = os.path.join(exe_dir)
                    
                    # 测试目录是否可写
                    test_file = os.path.join(config_dir, "test_write")
                    try:
                        with open(test_file, "w") as f:
                            f.write("test")
                        os.remove(test_file)
                        return config_dir
                    except:
                        pass
                    
                    # 如果不可写，尝试使用 ProgramData 目录
                    buf = ctypes.create_unicode_buffer(MAX_PATH)
                    ctypes.windll.shell32.SHGetFolderPathW(
                        None, CSIDL_COMMON_APPDATA, None, SHGFP_TYPE_CURRENT, buf
                    )
                    program_data = buf.value
                    config_dir = os.path.join(program_data, "OCR-GPT")
                    
                    # 创建配置目录
                    os.makedirs(config_dir, exist_ok=True)
                    return config_dir
                except:
                    # 如果都失败了，使用用户目录
                    user_dir = os.path.expanduser("~")
                    config_dir = os.path.join(user_dir, "OCR-GPT")
                    os.makedirs(config_dir, exist_ok=True)
                    return config_dir
            else:
                # 如果是直接运行 py 文件
                return os.path.dirname(os.path.abspath(__file__))

        # 设置配置目录
        config_dir = get_program_files()
        if config_dir not in sys.path:
            sys.path.insert(0, config_dir)

        # 确保配置文件存在
        config_file = os.path.join(config_dir, "config.json")
        if not os.path.exists(config_file):
            import json
            default_config = {
                "baidu_ocr": {
                    "api_key": "",
                    "secret_key": ""
                },
                "gpt": {
                    "api_url": "https://free.v36.cm/v1/chat/completions",
                    "api_key": ""
                },
                "window": {
                    "topmost": True
                }
            }
            with open(config_file, "w", encoding="utf-8") as f:
                json.dump(default_config, f, indent=4, ensure_ascii=False)
        '@
        
        if (-not (Test-Path "hooks")) {
            New-Item -ItemType Directory -Path "hooks"
        }
        $hookContent | Out-File -FilePath "hooks/rthook.py" -Encoding utf8
    
    - name: Build EXE
      shell: powershell
      run: |
        pyinstaller --noconfirm --onefile --windowed --noupx `
          --exclude-module matplotlib `
          --exclude-module numpy `
          --exclude-module pandas `
          --exclude-module scipy `
          --exclude-module PyQt5 `
          --runtime-hook "hooks/rthook.py" `
          --icon=ai.png `
          --add-data "ai.png;." `
          --add-data "config_manager.py;." `
          --add-data "hooks/rthook.py;hooks" `
          --name "OCR-GPT" `
          text_search.py
    
    - name: Delete existing tag if exists
      run: |
        git tag -d ${{ github.event.inputs.tag_version }} 2>$null
        git push origin :refs/tags/${{ github.event.inputs.tag_version }} 2>$null
      continue-on-error: true
    
    - name: Create Tag
      run: |
        git tag ${{ github.event.inputs.tag_version }}
        git push origin ${{ github.event.inputs.tag_version }} --force
    
    - name: Create Release and Upload Asset
      uses: softprops/action-gh-release@v1
      with:
        files: ./dist/OCR-GPT.exe
        tag_name: ${{ github.event.inputs.tag_version }}
        name: Release ${{ github.event.inputs.tag_version }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 